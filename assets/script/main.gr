import "cam.gr"

func randf() (float) {
    return rand(-1f, 1f);
}

event onLoad() {
    setupControls();
    setupCamera();
    yield;
    testUI();
    runtime();
}

task runtime() {
    var remilia = @Sprite("remilia", @vec4i(0, 0, 32, 48));
    remilia:position2D(@vec2f(12.5f, 0f));

    var remilia2 = @Sprite("remilia", @vec4i(96, 48, 32, 48));
    remilia2:position2D(@vec2f(12.5f + 32f, 0f));

    var skybox = @Skybox(""); // @TODO fix
    var globalLight = @DirectionalLight(@vec3f(0f, -10f, 0f), .2f, .01f);
    //var pointLight1 = @PointLight(@vec3(-1f, 0.5f, 0f), @color(1f, 0f, 0f), 0f, 0.3f);
    //var pointLight2 = @PointLight(@vec3(1f, 0.5f, 0f), @color(0f, 1f, 0f), 0f, 0.3f);
    //var spotLight = @SpotLight(@vec3(0f, 5f, 0f), @vec3(0f, -1f, 0f), @color(1f, 1f, 1f), 20f, 0.5f, 0.3f);

    //var quad = @Quad();

    //var cube = @Model("cube");

    var jupiter = @Model("jupiter");
    jupiter:position(@vec3f(0f, 0f, -2f));
    jupiter:scale(@vec3f(.05f, .05f, .05f));

    var reimu = @Model("reimu");
    reimu:position(@vec3f(0f, -1f, 0f));
    reimu:scale(@vec3f(0.1f, 0.1f, 0.1f));
    reimu:addTexture("reimu_body");

    var reimuHair = @Model("reimu_hair");
    reimuHair:position(@vec3f(0f, -1f, 0f));
    reimuHair:scale(@vec3f(0.1f, 0.1f, 0.1f));
    reimuHair:addTexture("reimu_hair");
    // @TODO add as child

    var skin = @Model("skin");
    skin:position(@vec3f(0f, -1f, 0f));

    var rig = @Model("riggedsimple");
    rig:rotation(@vec3f(0f, 90f, 0f));
    rig:scale(@vec3f(0.1f, 0.1f, 0.1f));

    loop yield {
        //clear();

        setup3D();

        rig:updateDisplayBoneId();

        skybox:draw();
        jupiter:draw();
        rig:draw();
        reimu:draw();
        reimuHair:draw();
        skin:draw();

        setup2D();

        //drawFilledCircle(@vec2(25f, 25f), 50f, @color(0f, 1f, 0f));
        //drawFilledRect(@vec2(0f, 0f), @vec2(50f, 50f), @color(1f, 0f, 0f));
        remilia:draw();
        remilia2:draw();

        //render();
    }
}

func updateDisplayBoneId(model: Model) {
    var modelBoneId = model:displayBoneId;
    var modelNbBones = model:nbBones;

    if (isActionActivated("nextBone")) {
        if (modelBoneId == modelNbBones - 1) {
            modelBoneId = -1;
        } else {
            modelBoneId = (modelBoneId + 1) % modelNbBones;
        }
    } else if (isActionActivated("previousBone") && modelBoneId >= -1) {
        if (modelBoneId == 0) {
            modelBoneId = -1;
        } else if (modelBoneId == -1) {
            modelBoneId = modelNbBones - 1;
        } else {
            modelBoneId = (modelBoneId - 1) % modelNbBones;
        }
    }

    model:displayBoneId(modelBoneId);
}

task testUI() {
    var label = @Label("Hello World !");
    label.pos(200f, 200f);
    label.align(AlignX.right, AlignY.top);
    appendUI(label);

    var state = @UIState("hidden");
    state.ticks = 15;
    state.spline = Spline.sineInOut;
    state.alpha = 0f;
    state.offsetX = -100f;
    state.angle = rad(45f);
    label.addState(state);

    sleep(2.seconds);
    label.runState("hidden");
}