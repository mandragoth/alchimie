export var mouseX : int;
export var mouseY : int;

export func setupControls() {
    // @TODO make deadzone optional here
    addAction("move_forward");
    addAction("move_backward");
    addAction("move_up");
    addAction("move_down");
    addAction("move_left");
    addAction("move_right");
    addAction("turn_up");
    addAction("turn_down");
    addAction("turn_left");
    addAction("turn_right");
    addAction("roll_left");
    addAction("roll_right");
    addAction("zoom_in");
    addAction("zoom_out");
    addAction("exit");
    addAction("nextBone");
    addAction("previousBone");
    
    // @TODO make true and false parameters optional / dependent on better parameters
    addActionEvent("move_forward", @InputEvent.controllerAxis(ControllerAxis.leftY, -1f));
    //addActionEvent("move_forward", @InputEvent.controllerButton(ControllerButton.up, KeyState.down));
    addActionEvent("move_forward", @InputEvent.keyButton(KeyButton.up, KeyState.down, false));
    //addActionEvent("move_forward", @InputEvent.keyButton(KeyButton.w, false));*/

    /*addActionEvent("move_backward", @InputEvent.controllerAxis(ControllerAxis.leftY, 1f));
    addActionEvent("move_backward", @InputEvent.controllerButton(ControllerButton.down, true));
    addActionEvent("move_backward", @InputEvent.keyButton(KeyButton.down, true, false));
    addActionEvent("move_backward", @InputEvent.keyButton(KeyButton.s, true, false));

    addActionEvent("move_up", @InputEvent.controllerAxis(ControllerAxis.rightTrigger, 1f));
    addActionEvent("move_up", @InputEvent.keyButton(KeyButton.space, true, false));

    addActionEvent("move_down", @InputEvent.controllerAxis(ControllerAxis.leftTrigger, 1f));
    addActionEvent("move_down", @InputEvent.keyButton(KeyButton.leftShift, true, false));

    addActionEvent("move_left", @InputEvent.controllerAxis(ControllerAxis.leftX, -1f));
    addActionEvent("move_left", @InputEvent.controllerButton(ControllerButton.left, true));
    addActionEvent("move_left", @InputEvent.keyButton(KeyButton.left, true, false));
    addActionEvent("move_left", @InputEvent.keyButton(KeyButton.a, true, false));

    addActionEvent("move_right", @InputEvent.controllerAxis(ControllerAxis.leftX, 1f));
    addActionEvent("move_right", @InputEvent.controllerButton(ControllerButton.right, true));
    addActionEvent("move_right", @InputEvent.keyButton(KeyButton.right, true, false));
    addActionEvent("move_right", @InputEvent.keyButton(KeyButton.d, true, false));

    addActionEvent("turn_up", @InputEvent.controllerAxis(ControllerAxis.rightY, 1f));
    addActionEvent("turn_down", @InputEvent.controllerAxis(ControllerAxis.rightY, -1f));
    addActionEvent("turn_left", @InputEvent.controllerAxis(ControllerAxis.rightX, -1f));
    addActionEvent("turn_right", @InputEvent.controllerAxis(ControllerAxis.rightX, 1f));

    addActionEvent("roll_left", @InputEvent.controllerButton(ControllerButton.leftShoulder, true));
    addActionEvent("roll_left", @InputEvent.keyButton(KeyButton.q, true, false));

    addActionEvent("roll_right", @InputEvent.controllerButton(ControllerButton.rightShoulder, true));
    addActionEvent("roll_right", @InputEvent.keyButton(KeyButton.e, true, false));

    addActionEvent("zoom_in", @InputEvent.keyButton(KeyButton.numPlus, true, false));
    addActionEvent("zoom_out", @InputEvent.keyButton(KeyButton.numMinus, true, false));

    addActionEvent("zoom_in", @InputEvent.mouseWheel(0, -1));
    addActionEvent("zoom_out", @InputEvent.mouseWheel(0, 1));

    addActionEvent("exit", @InputEvent.controllerButton(ControllerButton.start, true));
    addActionEvent("exit", @InputEvent.keyButton(KeyButton.escape, true, false));

    addActionEvent("nextBone", @InputEvent.keyButton(KeyButton.f1, true, false));
    addActionEvent("previousBone", @InputEvent.keyButton(KeyButton.f2, true, false));*/
}

event input(input: InputEvent) {
    switch(input.type)
    case(InputEventType.mouseMotion) {
        var input = input.mouseMotion?;
        mouseX = input.relativeX;
        mouseY = input.relativeY;
    }

    if (input.isAction("exit")) {
        exit;
    }
}