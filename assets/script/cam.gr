export func setupCamera() {
    setupControls();
    //camera2D();
    camera3D();
    //splitScreen();
}

func setupControls() {
    addAction("move_forward", 0.2);
    addAction("move_backward", 0.2);
    addAction("move_up", 0.2);
    addAction("move_down", 0.2);
    addAction("move_left", 0.2);
    addAction("move_right", 0.2);
    addAction("turn_up", 0.2);
    addAction("turn_down", 0.2);
    addAction("turn_left", 0.2);
    addAction("turn_right", 0.2);
    addAction("roll_left", 0.2);
    addAction("roll_right", 0.2);
    addAction("zoom_in", 0.2);
    addAction("zoom_out", 0.2);
    addAction("exit", 0.2);
    
    addActionEvent("move_forward", @InputEvent.controllerAxis(ControllerAxis.leftY, -1f));
    addActionEvent("move_forward", @InputEvent.controllerButton(ControllerButton.up, true));
    addActionEvent("move_forward", @InputEvent.keyButton(KeyButton.up, true, false));
    addActionEvent("move_forward", @InputEvent.keyButton(KeyButton.w, true, false));

    addActionEvent("move_backward", @InputEvent.controllerAxis(ControllerAxis.leftY, 1f));
    addActionEvent("move_backward", @InputEvent.controllerButton(ControllerButton.down, true));
    addActionEvent("move_backward", @InputEvent.keyButton(KeyButton.down, true, false));
    addActionEvent("move_backward", @InputEvent.keyButton(KeyButton.s, true, false));

    addActionEvent("move_up", @InputEvent.controllerAxis(ControllerAxis.rightTrigger, 1f));
    addActionEvent("move_up", @InputEvent.keyButton(KeyButton.space, true, false));

    addActionEvent("move_down", @InputEvent.controllerAxis(ControllerAxis.leftTrigger, 1f));
    addActionEvent("move_down", @InputEvent.keyButton(KeyButton.leftShift, true, false));

    addActionEvent("move_left", @InputEvent.controllerAxis(ControllerAxis.leftX, -1f));
    addActionEvent("move_left", @InputEvent.controllerButton(ControllerButton.left, true));
    addActionEvent("move_left", @InputEvent.keyButton(KeyButton.left, true, false));
    addActionEvent("move_left", @InputEvent.keyButton(KeyButton.a, true, false));

    addActionEvent("move_right", @InputEvent.controllerAxis(ControllerAxis.leftX, 1f));
    addActionEvent("move_right", @InputEvent.controllerButton(ControllerButton.right, true));
    addActionEvent("move_right", @InputEvent.keyButton(KeyButton.right, true, false));
    addActionEvent("move_right", @InputEvent.keyButton(KeyButton.d, true, false));

    addActionEvent("turn_up", @InputEvent.controllerAxis(ControllerAxis.rightY, 1f));
    addActionEvent("turn_down", @InputEvent.controllerAxis(ControllerAxis.rightY, -1f));
    addActionEvent("turn_left", @InputEvent.controllerAxis(ControllerAxis.rightX, -1f));
    addActionEvent("turn_right", @InputEvent.controllerAxis(ControllerAxis.rightX, 1f));

    addActionEvent("roll_left", @InputEvent.controllerButton(ControllerButton.leftShoulder, true));
    addActionEvent("roll_left", @InputEvent.keyButton(KeyButton.q, true, false));

    addActionEvent("roll_right", @InputEvent.controllerButton(ControllerButton.rightShoulder, true));
    addActionEvent("roll_right", @InputEvent.keyButton(KeyButton.e, true, false));

    addActionEvent("zoom_in", @InputEvent.keyButton(KeyButton.numPlus, true, false));
    addActionEvent("zoom_out", @InputEvent.keyButton(KeyButton.numMinus, true, false));

    addActionEvent("zoom_in", @InputEvent.mouseWheel(0, -1));
    addActionEvent("zoom_out", @InputEvent.mouseWheel(0, 1));

    addActionEvent("exit", @InputEvent.controllerButton(ControllerButton.start, true));
    addActionEvent("exit", @InputEvent.keyButton(KeyButton.escape, true, false));
}

task camera2D() {
    var camera = @OrthographicCamera();

    var moveSpeed = 0.01f;
    var zRotationSpeed = rad(2f);
    var zoomSpeed = 0.05f;
    var wheelFrames = 5;

    var cPosition = camera:position();
    var zRotation = camera:rotation();
    var zoomLevel = camera:zoom();

    loop yield {
        cPosition.x += getActionAxis("move_left", "move_right") * moveSpeed;
        cPosition.y += getActionAxis("move_down", "move_up") * moveSpeed;
        zRotation += getActionAxis("roll_right", "roll_left") * zRotationSpeed;

        if (isActionPressed("zoom_in")) {
            zoomLevel -= zoomSpeed;
        } else if (isActionPressed("zoom_out")) {
            zoomLevel += zoomSpeed;
        }

        zoomLevel = clamp(zoomLevel, 0.25f, 1.5f);

        camera:position(cPosition);
        camera:rotation(zRotation);
        camera:zoom(zoomLevel);
    }
}

var mouseX : int;
var mouseY : int;

event input(input: InputEvent) {
    switch(input.type)
    case(InputEventType.mouseMotion) {
        var input = input.mouseMotion?;
        mouseX = input.relativeX;
        mouseY = input.relativeY;
    }

    if(input.isAction("exit")) {
        exit;
    }
}

task camera3D() {
    var camera = @PerspectiveCamera();
    camera.position = @vec3f(0f, .5f, 2f);

    var moveSpeed = .05f;
    var zoomSpeed = .15f;
    var mouseSensitivity = .5f;
    var controllerSensitivity = 2f;
    var minRotX = 5f * degToRad();

    var cPosition = camera.position;

    loop yield {
        var xAxis = camera.right;
        var yAxis = camera.up;
        var zAxis = camera.forward;

        cPosition += xAxis * getActionAxis("move_left", "move_right") * moveSpeed +
                     yAxis * getActionAxis("move_down", "move_up") * moveSpeed +
                     zAxis * getActionAxis("move_backward", "move_forward") * zoomSpeed;
        camera:position(cPosition);

        var deltaPos = @vec2i(mouseX, mouseY);
        var rotX = mouseSensitivity * deltaPos.x + controllerSensitivity * getActionAxis("turn_left", "turn_right");
        var rotY = mouseSensitivity * deltaPos.y + controllerSensitivity * getActionAxis("turn_down", "turn_up");

        mouseX, mouseY = 0;

        // Rotate Z around X
        var newZAxis = rotate(zAxis, xAxis, rad(-rotY));

        // New angle between (z, y)
        var angleUp = angle(newZAxis, yAxis);
        var angleDown = angle(newZAxis, -yAxis);

        // Limit rotation around X
        if (angleUp > minRotX && angleDown > minRotX) {
            camera:forward(newZAxis);
        }

        // Rotate Z around Y
        camera:forward(rotate(newZAxis, yAxis, rad(-rotX)));

        // @TODO Get mouse position, create a Ray from it (cached as private variable)
        // @TODO Use ray to query entities in the scene, fetch the one closest to the camera near plane
    }
}

task splitScreen() {
    var width = screenWidth();
    var height = screenHeight();

    var halfWidth = width / 2;
    var halfHeight = height / 2;

    var cam1 = @PerspectiveCamera(width, height, @vec3(0f, 0f, 5f), @vec3(0f, 0f, -1f), @vec3(0f, 1f, 0f));
    cam1:viewport(@vec4i(0, 0, halfWidth, halfHeight));

    var cam2 = @PerspectiveCamera(width, height, @vec3(0f, 0f, -5f), @vec3(0f, 0f, 1f), @vec3(0f, 1f, 0f));
    cam2:viewport(@vec4i(0, halfHeight, halfWidth, halfHeight));

    var cam3 = @PerspectiveCamera(width, height, @vec3(5f, 0f, 0f), @vec3(-1f, 0f, 0f), @vec3(0f, 1f, 0f));
    cam3:viewport(@vec4i(halfWidth, 0, halfWidth, halfHeight));

    var cam4 = @PerspectiveCamera(width, height, @vec3(-5f, 0f, 0f), @vec3(1f, 0f, 0f), @vec3(0f, 1f, 0f));
    cam4:viewport(@vec4i(halfWidth, halfHeight, halfWidth, halfHeight));
}