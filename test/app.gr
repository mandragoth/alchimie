import "cam.gr"

func randf() (float) {
    return rand(-1f, 1f);
}

event app() {
    setupControls();
    setupCamera();
    yield;
    testUI();
    runtime();
}

task runtime() {
    // Scenes need to be instantiated for each rendering stack
    var scene2D = @Scene2D();
    var scene3D = @Scene3D();

    var rect = @Rect(1, 1, @color(1f, 0f, 0f));
    rect:position(@vec2f(400f, 300f));

    var rect2 = @Rect(32, 48, @color(0f, 0f, 1f));
    rect2:position(@vec2f(200f, 150f));

    var remilia = @Sprite("remilia");
    remilia:position(@vec2f(200f, 150f));

    task() {
        var angle = 0f;
        loop yield {
            remilia:rotation(angle);
            rect2:rotation(angle);
            angle -= rad(1f);
        }
    }();

    var skybox = @Skybox("night"); // @TODO fix
    var globalLight = @DirectionalLight(@vec3f(0f, -10f, 0f), .2f, .01f);
    //var pointLight1 = @PointLight(@vec3f(-1f, 0.5f, 0f), @color(1f, 0f, 0f), 0f, 0.3f);
    //var pointLight2 = @PointLight(@vec3f(1f, 0.5f, 0f), @color(0f, 1f, 0f), 0f, 0.3f);
    //var spotLight = @SpotLight(@vec3f(0f, 5f, 0f), @vec3f(0f, -1f, 0f), @color(1f, 1f, 1f), 20f, 0.5f, 0.3f);

    //var quad = @Quad();

    //var cube = @Model("cube");

    /*var jupiter = @Model("jupiter");
    jupiter:position(@vec3f(0f, 0f, -2f));
    jupiter:scale(@vec3f(.05f, .05f, .05f));*/

    /*var reimu = @Model("reimu");
    reimu:position(@vec3f(0f, -1f, 0f));
    reimu:scale(@vec3f(0.1f, 0.1f, 0.1f));
    reimu:addTexture("reimu_body");

    var reimuHair = @Model("reimu_hair");
    reimuHair:addTexture("reimu_hair");
    reimu:addChild(reimuHair);

    var reimuHairPos = reimuHair:globalPosition();
    print("Reimu hair global position: " ~ reimuHairPos);*/

    /*var skin = @Model("skin");
    skin:position(@vec3f(0f, -1f, 0f));*/

    var rig = @Model("riggedsimple");
    rig:rotation(@vec3f(0f, 90f, 0f));
    rig:scale(@vec3f(0.1f, 0.1f, 0.1f));

    loop yield {
        rig:updateDisplayBoneId();
    }
}

func updateDisplayBoneId(model: Model) {
    var modelBoneId = model:displayBoneId;
    var modelNbBones = model:nbBones;

    if (isActionActivated("next_bone")) {
        if (modelBoneId == modelNbBones - 1) {
            modelBoneId = -1;
        } else {
            modelBoneId = (modelBoneId + 1) % modelNbBones;
        }
    } else if (isActionActivated("previous_bone") && modelBoneId >= -1) {
        if (modelBoneId == 0) {
            modelBoneId = -1;
        } else if (modelBoneId == -1) {
            modelBoneId = modelNbBones - 1;
        } else {
            modelBoneId = (modelBoneId - 1) % modelNbBones;
        }
    }

    model:displayBoneId(modelBoneId);
}

task testUI() {
    var label = @Label("Hello World !");
    label:position(@vec2f(200f, 200f));
    label.align(AlignX.right, AlignY.top);
    appendUI(label);

    /*var state = @UIState("hidden");
    state.ticks = 15;
    state.spline = Spline.sineInOut;
    state.alpha = 0f;
    state.offsetX = -100f;
    //state.angle = rad(45f);
    label.addState(state);

    sleep(2.seconds);
    label.runState("hidden");*/
}