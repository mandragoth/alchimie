import "input.gr"

export func setupCamera() {
    camera3D();
    camera2D();
    //splitScreen3D();
}

task camera2D() {
    var camera = @OrthographicCamera();
    //camera:camera2DControls();
}

task camera3D() {
    var camera = @PerspectiveCamera();
    camera.position = @vec3f(0f, .5f, 2f);
    camera:camera3DControls();
}

task splitScreen3D() {
    var width = screenWidth();
    var height = screenHeight();

    var halfWidth = width / 2;
    var halfHeight = height / 2;

    var cam1 = @PerspectiveCamera(width, height, @vec3(0f, 0f, 5f), @vec3(0f, 0f, -1f), @vec3(0f, 1f, 0f));
    cam1:viewport(@vec4i(0, 0, halfWidth, halfHeight));

    var cam2 = @PerspectiveCamera(width, height, @vec3(0f, 0f, -5f), @vec3(0f, 0f, 1f), @vec3(0f, 1f, 0f));
    cam2:viewport(@vec4i(0, halfHeight, halfWidth, halfHeight));

    var cam3 = @PerspectiveCamera(width, height, @vec3(5f, 0f, 0f), @vec3(-1f, 0f, 0f), @vec3(0f, 1f, 0f));
    cam3:viewport(@vec4i(halfWidth, 0, halfWidth, halfHeight));

    var cam4 = @PerspectiveCamera(width, height, @vec3(-5f, 0f, 0f), @vec3(1f, 0f, 0f), @vec3(0f, 1f, 0f));
    cam4:viewport(@vec4i(halfWidth, halfHeight, halfWidth, halfHeight));
}

task camera2DControls(camera: OrthographicCamera) {
    // 2D camera controls removed for now
    var moveSpeed = 5f;
    var zRotationSpeed = rad(2f);
    var zoomSpeed = 0.05f;
    var wheelFrames = 5;

    var cPosition = camera.globalPosition;
    var zRotation = camera.rotation;
    var zoomLevel = camera.zoom;

    loop yield {
        cPosition.x += getActionAxis("move_left_2d", "move_right_2d") * moveSpeed;
        cPosition.y += getActionAxis("move_down_2d", "move_up_2d") * moveSpeed;
        zRotation.z += getActionAxis("roll_left_2d", "roll_right_2d") * zRotationSpeed;

        if (isActionActivated("zoom_in_2d")) {
            zoomLevel -= zoomSpeed;
        } else if (isActionActivated("zoom_out_2d")) {
            zoomLevel += zoomSpeed;
        }

        zoomLevel = clamp(zoomLevel, 0.25f, 1.5f);

        camera:position(cPosition);
        camera:rotation(zRotation);
        camera:zoom(zoomLevel);
    }
}

task camera3DControls(camera: PerspectiveCamera) {
    var moveSpeed = .05f;
    var zoomSpeed = .15f;
    var mouseSensitivity = .5f;
    var controllerSensitivity = 2f;
    var minRotX = rad(5f);

    var cPosition = camera.globalPosition;

    loop yield {
        var xAxis = camera.right;
        var yAxis = camera.up;
        var zAxis = camera.forward;

        cPosition += xAxis * @Input.getActionAxis("move_left_3d", "move_right_3d") * moveSpeed +
                     yAxis * @Input.getActionAxis("move_down_3d", "move_up_3d") * moveSpeed +
                     zAxis * @Input.getActionAxis("move_back_3d", "move_forward_3d") * zoomSpeed;
        camera:position(cPosition);

        var deltaPos = @Input.getDeltaMousePosition();
        var rotX = mouseSensitivity * deltaPos.x + controllerSensitivity * @Input.getActionAxis("turn_left_3d", "turn_right_3d");
        var rotY = mouseSensitivity * deltaPos.y + controllerSensitivity * @Input.getActionAxis("turn_down_3d", "turn_up_3d");

        mouseX, mouseY = 0;

        // Rotate Z around X
        var newZAxis = rotate(zAxis, xAxis, rad(-rotY));

        // New angle between (z, y)
        var angleUp = angleBetween(newZAxis, yAxis);
        var angleDown = angleBetween(newZAxis, -yAxis);

        // Limit rotation around X
        if (angleUp > minRotX && angleDown > minRotX) {
            camera:forward(newZAxis);
        }

        // Rotate Z around Y
        camera:forward(rotate(newZAxis, yAxis, rad(-rotX)));

        // @TODO Get mouse position, create a Ray from it (cached as private variable)
        // @TODO Use ray to query entities in the scene, fetch the one closest to the camera near plane
    }
}